///https://leetcode.com/problems/first-missing-positive/submissions/
class Solution {
    public int firstMissingPositive(int[] nums) {
				performCyclicSort(nums);
        return getMissingPositiveNum(nums);
    }
    private static int getMissingPositiveNum(int[] arr) {
		for(int i =0 ;i<arr.length;i++)
		{
		if(i+1!=arr[i])
			{
				return i+1;
			}
		}
		return arr.length+1;
	}

	private static void performCyclicSort(int[] arr) {
		int i = 0;
		while (i<arr.length) {
			//if(arr[i]>0)
			//{
				int correctIndexofCurentValue = arr[i]-1;//positive num starts from [1,2,3....]
				/*skip if value is negative or greater than arr.length because we cannot adjust these values in arr*/
				if(arr[i]>0&&arr[i]<=arr.length &&arr[i]!=arr[correctIndexofCurentValue])
				{
					swap(i,correctIndexofCurentValue,arr);
				}
				else
				{
					i++;
				}
			//}
			
		}//while
		
	}//

	private static void swap(int i, int j, int[] arr) {
		int temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;
	}

	private static void copyStringtoIntegerArr(int[] arr, String[] strArr) {
		for(int i =0 ;i<arr.length;i++)
		{
			arr[i] = Integer.parseInt(strArr[i]);
		}
	}

}
