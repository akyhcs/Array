//https://leetcode.com/problems/maximum-gap/submissions/

class Solution {
    public int maximumGap(int[] nums) {
        return MaximumGap.getMaxGapWithoutSorting(nums);
    }
}

public class MaximumGap {
/**
	public static void main(String[] args) {
		int n = getMaxGapWithoutSorting(new int[] {});
		System.out.println(n);
	}

 */

	public static int getMaxGapWithoutSorting(int[] arr) {
		if(arr.length<2)
		{
			return 0;
		}
		int maxArr[] = new int[arr.length];
		int minArr[] = new int[arr.length];
		int max = getMaximumfromArr(arr);
		int min = getMinimumfromArr(arr);
		if(max==min)
		{
			return 0;
		}
		int bucketSize = ((max-min)%(arr.length-1))==0?((max-min)/(arr.length-1)):((max-min)/(arr.length-1))+1;
		Arrays.fill(maxArr, Integer.MIN_VALUE);
		Arrays.fill(minArr, Integer.MAX_VALUE);
		//bucketIndexforCurrentNum 
		for(int i =0 ;i<arr.length;i++)
		{
			int bucketIndex = (arr[i] - min)/bucketSize;
			maxArr[bucketIndex] = getMax(maxArr[bucketIndex],arr[i]);
			minArr[bucketIndex] = getMin(minArr[bucketIndex], arr[i]);
		}
		int prevMax = Integer.MIN_VALUE;
		int ans = Integer.MIN_VALUE;
		for(int i =0 ;i<arr.length;i++)
		{
			if(minArr[i] == Integer.MAX_VALUE)///no current element has been found to work upon
				continue;
			if(prevMax==Integer.MIN_VALUE)//first time a correct value has been found to be work upon
				prevMax = maxArr[i];
			else
			{
				ans = getMax(ans, minArr[i]-prevMax);//taking current minArr which will be greater than previous max
				prevMax=maxArr[i];
			}
		}
		return ans;
	}

	private static int getMinimumfromArr(int[] arr) {
		int min = arr[0];
		for(int i =1;i<arr.length;i++)
		{
			min = getMin(min,arr[i]);
		}
		return min;
	}

	private static int getMin(int a, int b) {
		
		return a<b?a:b;
	}

	private static int getMaximumfromArr(int[] arr) {
		int max = arr[0];
		for(int i = 1;i<arr.length;i++)
		{
			max = getMax(max,arr[i]);
		}
		return max;
	}

	private static int getMax(int a, int b) {
		
		return a>b?a:b;
	}

}
